.row {
    // standard for grids
    //width: 1140px;
    //convert to rem / 10px

    //width: 114rem
    //still not perfect, it will expand too big.

    max-width: $grid-width;
    
    //center block elements within another block
    margin: 0 auto;

    &:not(:last-child){
        margin-bottom: $gutter-vertical;
    }

    //We're going to be using floats

    //The problem with floats being that they collapse the height.
    //How do we fix that?
    //Trickery.

    //Lets make a pseudo-element AFTER the element
    //specify its content "",
    //change its display to display: table.
    //so give it the clear: both; property and value

    //now after the float element there is a pseudo-element which will
    // ignore its float and keep its height.

    //lets include that code (written as a mixin)

    // we dont want the right margin on the last element
    @include clearfix;

    // select all class attributes that START with col-
    
    [class^="col-"] {
        float: left;
        &:not(:last-child) {
            margin-right: $gutter-horizontal;
        }
    }

    // [class$="col-"]  Select all that end with "col-"
    // [class*="col-"]  Select all that contain "col-"


    //:last-child works too, but if we use :not(:last-child)
    //margin-bottom will only be applied to .row if its NOT the :last-child
    //
    //compared to if the 

    .col-1-of-2 {
        //calc allows us to mix units, like rems and px vs %'s

        //This is only possible with CSS
        //It cannot happen with SCSS because the browser has not compiled
        //the values of rem, px, %

        //in order to use a sass variable in CSS
        //we must use a template literal syntax

        // #{ $sass-variable }
        width: calc((100% - #{$gutter-horizontal}) / 2);
    }

    .col-1-of-4 {
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4)
    }

    .col-2-of-4 {
        width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal})
    }

    .col-3-of-4 {
        width: calc( 3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal} * 2)
    }

    .col-1-of-3 {
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    }

    .col-2-of-3 {
        width: calc(2 * ((100% - 2 * #{$gutter-horizontal})/3) + #{$gutter-horizontal});
    }

}