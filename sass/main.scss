@import "base/base";
@import "base/animations";
@import "base/typography";


$color-primary: #7ed56f;
$color-primary-light: #55c57a;
$color-primary-dark:#28b485;

$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

/* Basic Reset */
*, *::after, *::before {
    margin: 0;
    padding: 0;
    /* This changes the box model, so that borders and 
    paddings are not added to total width of an element */
    box-sizing: inherit;
}

html {
    box-sizing: border-box;
    /* 
    We set the font-size to 10 for easy future rem usage 
    
    font-size: 10px;

    Now calculations can be done easily since 10 is a great divider,
    16px? thats 1.6rem etc.

    The problem with this is it will overwrite user font-sizes if a user wants to overwrite a font-size for accessibility
    A much better practice is to still shoot for 10px, but calculate the 10px off of percentages of the default value.

    The default value: 16px
    The desired value: 10px

    The calculation: 10/16 = 0.625
    The percentage: 62.5%

    So with that we can now achieve 10px for a good rem measurement AND be accessible
    */

    font-size: 62.5%;
    /* Rems are not developed below internet explorer 9 */
}
/* Project wide font definition */
body {
    /* Lato is imported from google fonts */
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 1.6rem;
    line-height: 1.7;
    color: $color-grey-dark;
    padding: 3rem;
}

.header {
    /* Vh is not 100 so user can tell theres more content below*/
    height: 95vh;

    /*Background-image has one linear-gradient over one url jpg*/
    background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, .6),
        rgba($color-primary-dark, .6)), 
    url(../img/hero.jpg);
    /* Cover the page */
    background-size: cover;
    /* Make sure the image scales responsively with the top static */
    background-position: top;
    /* Clip to a shape of a rectangle */
    clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
    /* position relative for its child element which has an absolute position */
    position: relative;

    &__logo {
        height: 3.5rem;
    }

    &__logo-box {
        position: absolute;
        top: 4rem;
        left: 4rem;
    }

    &__text-box {
        position: absolute;
        /* top and left %'s are in relation to the parent element */
        top: 40%;
        left: 50%;
        /* transform: translate() is in relation to the element itself */
        transform: translate(-50%, -50%);
    
        /* pretty self explanatory, it will pass to all children */
        text-align: center;
        backface-visibility: hidden;
    }
}


.heading-primary {
    color: $color-white;
    text-transform: uppercase;
        /* spreads out the word between letters, to make a roomy header */
    
        /* 
        Determines if the back part of an element is hidden while animating 
        This can get rid of a 1-2px shake.
        */
        backface-visibility: hidden;
        margin-bottom: 3rem;

        &--main {
            /* Display block to have the element drop the next below itself;*/
            display: block;
            letter-spacing: 3.5rem;
            font-size: 6rem;
            font-weight: 400;
        
            /* Animation Properties */
            animation-name: moveInLeft;
            animation-duration: 1s;
        
            /* 
            Other Cool animation properties 
            
            animation-delay: 1s;
            animation-iteration-count: 3;
            animation-timing-function: ease-in;
            */
        }
        
        &--sub {
            display: block;
            font-size: 2rem;
            letter-spacing: 1.75rem;
            font-weight: 700;
        
            /* Shorthand animation */
            animation: moveInRight .8s ease-out;
        }
}



/* 
For Browser performance its best to only animate two properties:
1. Opacity
2. Transform Property

For an animation to work there are two properties we need to specify:
1. animation-name: animationsName;
2. animation-duration: 3s;
*/
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(5rem);
    }
    80% {
        transform: translateY(.5rem);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes buttonEnlargeFlash {
    0% {
        opacity: 1;
        transform: scaleX(1) scaleY(1)
    }
    100% {
        opacity: 0;
        transform: scaleX(1.15) scaleY(1.4);
    }
}

.btn {
    backface-visibility: hidden;
    /* 
    link is a pseudo-class, it styles elements under a special condition 

    visited: the styling after it is clicked
    */
    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        /* 
        We have to change the display type, since an a tag is just text.
        We want the display to be inline-block
        */
        display: inline-block;
        /* curve the edges of the button */
        border-radius: 10rem;

        /* control speed of animation, must be on initial state */
        transition: all .2s;

        position: relative;
    }

    &:hover {
        transform: translateY(-.4rem);
        box-shadow: 0 1rem 1rem rgba($color-black, .3);
        
        &::after {
            animation: buttonEnlargeFlash ease-out .5s;
        }
    }

    &:active {
        transform: translateY(-.2rem);
        box-shadow: 0 .4rem .6rem rgba($color-black, .3);
    }

    &--white {
        background-color: $color-white;
        color: $color-grey-dark;
        &::after {
            background-color: $color-white;
        }
    }


    &::after {
        /* In order for the after element to be created we need a display/content property */
        display: inline-block;
        content: '';

        /* 
        The after pseudo-class is treated as a child of the selector its attached to
        100% of its parent.
        */
        height: 100%;
        width: 100%;
        border-radius: 10rem;

        /* Put the after element behind its RELATIVE parent (must be specified) */
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
    }

    &--animated {
        animation: moveInBottom ease-in .55s .5s;

        /* The first 0% keyframe styles will be applied before the animation starts */
        animation-fill-mode: backwards;
    }

}
